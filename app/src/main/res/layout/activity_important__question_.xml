<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_centerVertical="true"
    android:layout_centerHorizontal="true"
    android:background="@color/colorDarkGreen"
    tools:context="com.example.ashu.programmingpie.Important_Question_Activity">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginTop="10dp"
        android:layout_marginStart="10dp"
        android:layout_marginEnd="10dp"
        android:layout_marginBottom="10dp"
        android:background="@color/colorWhite">
        <TextView
            android:layout_width="match_parent"
            android:layout_height="40dp"
            android:text="Important Questions"
            android:textColor="@color/colorAccent"
            android:textSize="25sp"
            android:gravity="center"/>
    </LinearLayout>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="60dp"
        android:padding="10dp">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="10dp"
            android:background="@color/colorWhite">
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="1.) List any five features of Java?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text="Object Oriented, platform Independent, Robust, interpreted, Multi-threaded"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="2.) Why is Java Architectural Neutral?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorGreen"
                android:text=" it's compiler generates an architecture neutral object file format, which makes the compiled code to be executable on many processors, with the presence of java runtime system."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlue"
                android:text="3.) What is JIT Compiler?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation. Here the term &quot;compiler&quot; refers to a translator from the instruction set of a Java Virtual Machine(JVM) to the instrution set of a specific CPU."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBrown"
                android:text="4.) What gives Java its 'write once and run anywhere' nature?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text=" The bytecode. Java is compiled to be a bytecode which is the intermediate language between source code and machine code. This byte code is not platform specific and hence can be fed to any platform."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPrimaryDark"
                android:text="5.) Why Java is considered dynamic?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text=" It is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to object on run-time."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorAccent"
            android:text="6.) Define class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text=" A class is a blue print from which individual objects are created. A class can contain fields and method to describe the behavior of an object."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="7.)What if I write static public void instead of public static void?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="program compiles and run properly."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlue"
            android:text="8.) What kind of variables a class can consist of?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="A class consist of local variable, instance variable and class variables."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBrown"
                android:text="9.) What is the default value of the local variables?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="The local variables are not initialized to any default value, neither primitives nor object references."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPrimaryDark"
                android:text="10.) what is Singleton class"/>


            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text="Singleton class control object creation, limiting the number to one but allowing the flexibility to create more objects if the situation changes. "/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBrown"
                android:text="11.) What is constructor?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="Constructor is just like a method that is used to initialize the state of an object. It is invoked at the time of object creation."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorRed"
                android:text="12.) What is the purpose of default constructor?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorGreen"
                android:text="The Java compiler creates a default constructor only if there is no constructor in the class."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPrimaryDark"
                android:text="13.) Does constructor return any value?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="yes, that is current instance (you can't use return type yet it returns a value)."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="14.) Is constructor inherited?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text="No, constructor is not inherited."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginEnd="10dp"
                android:layout_marginLeft="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginStart="0dp"
                android:paddingTop="10dp"
                android:text="15.)Can you make a constructor final?"
                android:textColor="@color/colorBlue"
                android:textStyle="bold" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="No, constructor can't be final."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="16.)What is static variable?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text="static variable is used to refer the common property of all objects (that is not unique for each object). "/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorGreen"
            android:text="17.) What is static block?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="Is used to initilize the static data member. It is excuted before main method at the time of classloading."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorPrimaryDark"
            android:text="18.) Can we execute a program without main() method?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text=" yes, one of the way is static block."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="19.) What if the static modifier is removed from the signature of the main method?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="Program compiles. But at runtime throws an error &quot;NoSuchMethodError&quot;."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorDarkGreen"
                android:text="20.) What is the default value of byte datatype in java?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text="Default value of byte datatype is 0."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorYellow"
            android:text="21.) When a byte datatype is used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="This datatype is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="italic"
            android:textColor="@color/colorBrown"
            android:text="22.) When parselent() method can be used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimary"
                android:text="This method is used to get the primitive data type of a certain String."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorPurple"
            android:text="23.)What is the difference between StringBuffer and StringBuilder class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="Use StringBuilder whenever possible because it is faster than StringBuffer. But, if thread safety is necessary then use StringBuffer object."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorDarkGreen"
            android:text="24.) Which package is used for pattern matching with regular expressions?  "/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text="java.util.regex package is used for this purpose."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorPrimaryDark"
            android:text="25.) java.util.regex consists of which classes?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="java.util.regex consists of three classes- pattern class, matcher class and patternSyntaxException class."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlue"
            android:text="26.) Which class is the superclass for every class"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="Object class"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorRed"
                android:text="27.) What is composition?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorGreen"
                android:text="Holding the reference of the other class within some other class is known as composition."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorPurple"
            android:text="28.) Why Java doesn't support pointers?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="Pointer is a variable that refers to the memory address. They are not used in java because they are unsafe(unsecured) and complex to understand."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBrown"
            android:text="29.) What is super in java?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text="It is a keyboard that refers to the immediate parent class object."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlack"
            android:text="30.) Can you use this() and super() both in a constructor?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text=" No. Because super() or this() must be the first statement."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorYellow"
            android:text="31.) Why method overloading is not possible by changing the return type in java?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="Because of ambiguity."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="italic"
            android:textColor="@color/colorGreen"
            android:text="32.) Can we overload main() method?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text=" Yes, you can have many main() methods in a class by overloading the main method."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlue"
            android:text="33.) Which are the two subclasses under Exception class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="The Exception class has two main subclasses: IOException class and RuntimeException Class."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBrown"
            android:text="34.) When throws keyword is used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="If a method does not handle a checked exception the method must declar it using the throws keyword. The throws keyword appears at the end of a method's signature. "/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlue"
            android:text="35.) How finally used under Exception Handling?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text="The finally keyword is used to create a block of code that follows a try block. A finally block of code always executes, whether or not an exception has occurred."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorRed"
            android:text="36.) What is Abstraction?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text=" It refers to the ability to make a class abstract in OOP. It helps to reduce the complexity and also improves the maintainability of the system."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorAccent"
            android:text="37.) What is Abstract class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="These classes cannot be instantiated and are either partially implemented or not at all implemented. This class contains one or more abstract methods which are simply method declarations without a body."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlack"
            android:text="38.) What is an Interface?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text="An interface is a collection of abstract methods. A class implemented an interface, thereby inheriting the abstract methods of the interface."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorAccent"
            android:text="39.) Define Packages in Java? "/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="A Package can be define as a grouping of related types(classes,interfaces,enumeration and annotations)providing access protection and name space management."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBrown"
            android:text="40. What are the two ways in which Thread can be created?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text="Thread can be created by:implementing runnable interface, extending the Thread class."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorDarkGreen"
            android:text="41.) Can we override static method?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="No, you can't override the static method because they are the  part of class not object."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorPrimary"
            android:text="42.) Can we override the overloaded method?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text="yes."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorYellow"
            android:text="43.) Can you have virtual functions in Java?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="Yes, all functions in Java are virtual by default."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorPrimary"
            android:text="44.) What is final variable?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="If you make any variable as final, you cannot change the value of final variable(It will be constant)."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="italic"
            android:textColor="@color/colorBrown"
            android:text="45.) What is blank final variable?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text=" A final variable, not initalized at the time of declaration, is known as blank final variable."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorRed"
                android:text="46.) Can we intialize blank final variable?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="Yes,only in constructor if it is non-static. If it is static blank final variable, it can be initalized only in the static block."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlue"
            android:text="47.) Can you declare the main method as final?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="Yes, such as, public static final void main(String[]args){}."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="48.) What is an applet?48. What is an applet?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text="An applet is a Java program that runs in a Web browser. An applet can be a fully functional Java application because it has the entire Java API and its disposal."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorPrimaryDark"
            android:text="49.) An applet extend which class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="  An applet extends java.applet.Applet class."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlue"
                android:text="50.) Explain garbage collection in java?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text=" It uses garbage collection to free the memory. By cleaning those objects that is no longer reference by any of the program."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlack"
            android:text="51.) Define immutable object?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorGreen"
                android:text="An immutable object can't be changed once it is created."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="52.) Explain the usage of this() with constructors?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="It is used with variables or methods and used to call constructer of same class."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorGreen"
            android:text="53.) Can you achieve runtime polymorphism by data members?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="No."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="54.) Can there be any abstract method without abstract class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text=" No, if there is any abstract method in a class, that class must be abstract."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPurple"
                android:text="55.) Can you use abstract and final both with a method?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text="No, because abstract method needs to be overridden whereas you can't override final method."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorRed"
                android:text="56.) Is it possiable to instantiate the abstract class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text=" No, abstract class can never be instantiated."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorAccent"
            android:text="57.) What is marker interface?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text="An interface that have no data member and method is known as a marker interface. for example serializable, cloneable etc."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorYellow"
                android:text="58. Can we define private and protected modifiers for variables in interfaces?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text="No, they are implicitly public."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlue"
            android:text="59.) When can an object reference be cast to an interface reference?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="An object reference can be cast to an interface referance when the object implement the referenced interface."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorDarkGreen"
                android:text="60.) What is the difference between object oriented programming language and object based programming language?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text="Object based programming languages follow all the features od OOPs except Inheritance. Javascript is an example of object based programming languages."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="10dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="italic"
            android:textColor="@color/colorPrimaryDark"
            android:text="61.) What is the purpose of default constructor?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text=" The java compiler creates a default constructor only if there is no constructor in the class."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPrimary"
                android:text="62.) What is function overloading?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text=" If a class has multiple functions by same name but different parameters, it is known as method overloading."/><TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="10dp"
            android:layout_marginStart="0dp"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:paddingTop="10dp"
            android:textStyle="bold"
            android:textColor="@color/colorBlue"
            android:text="63.) What is function overriding?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="If a subclass provides a specific implementation of a method that is already provided by its parent class,it is known as method overriding."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorDarkGreen"
                android:text="64.) What is exception?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text=" An exception is a problum that arises during the execution of a program. exeception are caught by handlers positioned along the thread's method invocation stack."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="65.) What do you mean by checked Exceptions?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="It is exception that is typically a user error or a problem that cannot be foreseen by the programmer.
    For example, if a file is to be opened, but the file cannot be found,an exception occurs. These exception cannot simply be ignord at the time of compilation."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPurple"
                android:text="66.) What is NullPointerException?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text=" A NullPointerException is thrown when calling the instance method of a null object, accessing or modifying the field of a null object etc."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBrown"
                android:text="67.) Explain Runtime Exceptions?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="It is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked execeptions, runtime exceptions are ignored at the time of compliation."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorYellow"
                android:text="68.) Do I need to import java.lang package any time? Why?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorGreen"
                android:text="No. It is by default loaded internally by the JVM."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlue"
                android:text="69.) What is the base class for error and Exception?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="Throwable."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPurple"
                android:text="70.) Which are the two subclasses under Exception class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text="The Exception class has two main subclasses: IOException class and RuntimeException class."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorDarkGreen"
                android:text="71.) Can finally block be used without catch?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text=" Yes, by try block. finally must be followed by either try or catch."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBrown"
                android:text="72.) When throws keyword is used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="If a method does not handle a checked exception, the method must declare it using the throwskeyword. The throws keyword appears at the end of a method's signature."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="73.) When throw keyword is used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text="An exception can be thrown, either a newly instantiated one or an exception that you just caught, by using throw keyword."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlue"
                android:text="74.) Can an exception be rethrown?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="Yes."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="75.) What is exception propagation?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text="Forwarding the exception object to the invoking method is known as exception propagation."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorDarkGreen"
                android:text="76.) What will happen to the Exception object after exception handling?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimary"
                android:text="The Exception object will be garbage collected in the next garbage collection."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="77.) What is the meaning of immutable in terms of string?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="The simple meaning of immutable is unmodifiers or unchangeable. Once string object has been created, its value can't be changed."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPurple"
                android:text="78.) How many ways we can create the string object?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text="There are two ways to create the string object, by string literal and by new keyword."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="79.) Why java uses the concept of string litral?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text="To make Java more memory efficient(because no new objects are created if it exists already in string constant pool)."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPurple"
                android:text="80.) What is the basic difference between string and stringbuffer object?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text=" String is an immutable object. StringBuffer is a mutable object."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorYellow"
                android:text="81.) What is the diffrence between StringBuffer and StringBuilder?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="StringBuffer is synchronized whereas StringBuilder is not synchronized.    "/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlue"
                android:text="82.) What is nested class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text="A class which is declared inside another class is known as nested class. There are 4 types of nested class member inner class, local inner class, annonymous inner class and static nested class."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="83. Is there any difference between nested classes and inner classes?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text="Yes, inner clases are non-static nested classes i.e. inner classes are the part of nested classes."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPrimaryDark"
                android:text="84.) Can we access the non-final local variable, inside the local inner class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text="No, local variable must be constant if you want to access it in local inner class."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text="85.) What is nested interface?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text=" Any interface i.e. declared inside the interface or class, is known as nested interface. It is static by default."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorYellow"
                android:text="86.) Can a class have an interface?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text="Yes, it is known as nested interface."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPurple"
                android:text="87.) Can an Interface have a class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorAccent"
                android:text="Yes, they are static implicitely."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorRed"
                android:text="88.) Define Inheritance?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text="It is the process where one object acquires the properties of another. With the use of inheritance the information is made manageable in hierarchical order."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlue"
                android:text="89.) When super keyword is used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text=" If the method overrides one of its superclass's methods, overridden method can be invoked through the use of the keyword super. It can be also used to refer to a hidden field."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPrimaryDark"
                android:text="90.) What is polymorphism?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="Polymorphism is the ability of an object to take of many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorDarkGreen"
                android:text="91.) What is Abstraction?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text=" It refers to the ability to make a class abstract in OOP. It helps to reduce the complexity and also improves the maintainability of the system."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlack"
                android:text="92.) What is Abstract class?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlue"
                android:text=" These classes can't be instantiated and are either partially implemented or not at all implemented. This class contains one or more abstract methods which are simply method declarations without a body."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="93.) When Abstract methods are used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBlack"
                android:text="If you want a class to contain a particular method but you want the actual implementation of the method to be determined by child classes, you can declare the method in the parent as abstract."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorBlue"
                android:text="94.) What is Encapsulation?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorRed"
                android:text="It is the technique of making the fields in a class private and providing access to the field via public methods. If a field is declared private, it cannot be accessed by anyone outside the class, thereby hiding the fields within the class. Therefore encapsulation is also referred to as data hiding."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorGreen"
                android:text="95. What is an Interface?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorYellow"
                android:text=" An interface is collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text="96.) Define Packages in Java?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPurple"
                android:text=" A package can be defined as a grouping of related types(classes, interfaces, enumerations and annotations) providing access protection and name space management."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="97.) Why Packages are used?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorBrown"
                android:text="Packages are used in java in-order to prevent naming conflicts, to control access, to make searching/locating and usage of classes, interfaces, enumerations and annotations,etc.,easier"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorAccent"
                android:text="98.) What is difference between the Reader/Writer class hierarchy and InputStream/OutputStream class hierarchy?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorPrimaryDark"
                android:text="The Reader/Writer class hierarchy is character-oriented, and the InputStream/OutputStream class hierarchy class hierarchy is byte-oriented."/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="0dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:textStyle="bold"
                android:textColor="@color/colorPurple"
                android:text="99.) What is I/O filter?"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginStart="10dp"
                android:layout_marginRight="10dp"
                android:layout_marginEnd="10dp"
                android:paddingTop="10dp"
                android:paddingBottom="10dp"
                android:textStyle="italic"
                android:textColor="@color/colorDarkGreen"
                android:text=" An I/O filter is an object that reads from one stream and writes to another, usually altering the data in some way as it is passed from one stream to another."/>




        </LinearLayout>

    </ScrollView>

</RelativeLayout>
